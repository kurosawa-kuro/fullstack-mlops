# 🏠 House Price Predictor - リファクタリング版Makefile
# 開発者体験向上のための便利コマンド集

.PHONY: help install install-dev install-prod test test-unit test-integration test-e2e lint format clean setup setup-dev setup-prod train train-ensemble check-model status dwh dwh-explore dwh-stats pipeline pipeline-quick release docker-build docker-run docker-stop metabase-full metabase-up metabase-down metabase-status

# デフォルトターゲット
.DEFAULT_GOAL := help

# 変数定義
PYTHON := python3
VENV := .venv
PIP := $(VENV)/bin/pip
PYTEST := $(VENV)/bin/pytest
BLACK := $(VENV)/bin/black
ISORT := $(VENV)/bin/isort
FLAKE8 := $(VENV)/bin/flake8
MYPY := $(VENV)/bin/mypy
BANDIT := $(VENV)/bin/bandit

# ヘルプ表示
help:
	@echo "🏠 House Price Prediction MLOps Pipeline (リファクタリング版)"
	@echo ""
	@echo "📋 利用可能なコマンド:"
	@echo ""
	@echo "🔧 セットアップ:"
	@echo "  make setup              # 基本セットアップ"
	@echo "  make setup-dev          # 開発環境セットアップ"
	@echo "  make setup-prod         # 本番環境セットアップ"
	@echo ""
	@echo "📦 依存関係管理:"
	@echo "  make install            # 基本依存関係インストール"
	@echo "  make install-dev        # 開発用依存関係インストール"
	@echo "  make install-prod       # 本番用依存関係インストール"
	@echo ""
	@echo "🧪 テスト:"
	@echo "  make test               # 全テスト実行"
	@echo "  make test-unit          # 単体テスト実行"
	@echo "  make test-integration   # 統合テスト実行"
	@echo "  make test-e2e           # E2Eテスト実行"
	@echo ""
	@echo "🔍 コード品質:"
	@echo "  make lint               # コード品質チェック"
	@echo "  make format             # コードフォーマット"
	@echo "  make type-check         # 型チェック"
	@echo "  make security-check     # セキュリティチェック"
	@echo ""
	@echo "🗄️ データウェアハウス:"
	@echo "  make dwh                # DWH構築・データ投入"
	@echo "  make dwh-explore        # DWHデータ探索"
	@echo "  make dwh-stats          # DWH統計情報"
	@echo ""
	@echo "🤖 機械学習:"
	@echo "  make train              # モデル訓練"
	@echo "  make train-ensemble     # アンサンブルモデル訓練"
	@echo "  make check-model        # モデル性能確認"
	@echo ""
	@echo "🚀 パイプライン:"
	@echo "  make pipeline           # 全パイプライン実行"
	@echo "  make pipeline-quick     # クイックパイプライン実行"
	@echo ""
	@echo "🐳 Docker:"
	@echo "  make docker-build       # Dockerイメージビルド"
	@echo "  make docker-run         # Dockerコンテナ起動"
	@echo "  make docker-stop        # Dockerコンテナ停止"
	@echo ""
	@echo "📊 Metabase BI:"
	@echo "  make metabase-full      # Metabase完全セットアップ"
	@echo "  make metabase-up        # Metabase起動"
	@echo "  make metabase-down      # Metabase停止"
	@echo "  make metabase-status    # Metabase状態確認"
	@echo ""
	@echo "🔧 その他:"
	@echo "  make clean              # クリーンアップ"
	@echo "  make status             # パイプライン状態確認"
	@echo "  make release            # リリース作成"

# セットアップ
setup: venv install
	@echo "✅ 基本セットアップ完了"

setup-dev: venv install-dev
	@echo "🔧 開発環境セットアップ中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/pre-commit install; \
		echo "✅ 開発環境セットアップ完了"; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi

setup-prod: venv install-prod
	@echo "🚀 本番環境セットアップ完了"

# 仮想環境作成
venv:
	@echo "🐍 仮想環境を作成中..."
	@if [ ! -d "$(VENV)" ]; then \
		$(PYTHON) -m venv $(VENV); \
		echo "✅ 仮想環境を作成しました"; \
	else \
		echo "✅ 仮想環境は既に存在します"; \
	fi
	@echo "📝 仮想環境をアクティベートするには: source $(VENV)/bin/activate"

# 依存関係インストール
install:
	@echo "📦 基本依存関係インストール中..."
	@if [ -d "$(VENV)" ]; then \
		$(PIP) install -r requirements.txt; \
	else \
		echo "❌ 仮想環境が見つかりません。先に 'make venv' を実行してください"; \
		exit 1; \
	fi
	@echo "✅ 基本依存関係インストール完了"

install-dev:
	@echo "🔧 開発用依存関係インストール中..."
	@if [ -d "$(VENV)" ]; then \
		$(PIP) install -r requirements-dev.txt; \
	else \
		echo "❌ 仮想環境が見つかりません。先に 'make venv' を実行してください"; \
		exit 1; \
	fi
	@echo "✅ 開発用依存関係インストール完了"

install-prod:
	@echo "🚀 本番用依存関係インストール中..."
	@if [ -d "$(VENV)" ]; then \
		$(PIP) install -r requirements-prod.txt; \
	else \
		echo "❌ 仮想環境が見つかりません。先に 'make venv' を実行してください"; \
		exit 1; \
	fi
	@echo "✅ 本番用依存関係インストール完了"

# テスト実行
test: test-unit test-integration test-e2e
	@echo "✅ 全テスト実行完了"

test-unit:
	@echo "🧪 単体テスト実行中..."
	@if [ -d "$(VENV)" ]; then \
		$(PYTEST) tests/unit/ -v --cov=src --cov-report=html --cov-report=term-missing; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ 単体テスト実行完了"

test-integration:
	@echo "🔗 統合テスト実行中..."
	@if [ -d "$(VENV)" ]; then \
		$(PYTEST) tests/integration/ -v; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ 統合テスト実行完了"

test-e2e:
	@echo "🌐 E2Eテスト実行中..."
	@if [ -d "$(VENV)" ]; then \
		$(PYTEST) tests/e2e/ -v; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ E2Eテスト実行完了"

# コード品質チェック
lint:
	@echo "🔍 コード品質チェック中..."
	@if [ -d "$(VENV)" ]; then \
		$(FLAKE8) src/ tests/ --max-line-length=88 --ignore=E501,W503; \
		$(BLACK) --check src/ tests/; \
		$(ISORT) --check-only src/ tests/; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ コード品質チェック完了"

format:
	@echo "🎨 コードフォーマット中..."
	@if [ -d "$(VENV)" ]; then \
		$(BLACK) src/ tests/; \
		$(ISORT) src/ tests/; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ コードフォーマット完了"

type-check:
	@echo "🔍 型チェック中..."
	@if [ -d "$(VENV)" ]; then \
		$(MYPY) src/; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ 型チェック完了"

security-check:
	@echo "🔒 セキュリティチェック中..."
	@if [ -d "$(VENV)" ]; then \
		$(BANDIT) -r src/ -f json -o bandit-report.json; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ セキュリティチェック完了"

# クリーンアップ
clean:
	@echo "🧹 一時ファイルを削除中..."
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	rm -rf .mypy_cache/
	rm -rf bandit-report.json
	@echo "✅ クリーンアップ完了"

# データウェアハウス
dwh:
	@echo "🗄️ DWH構築・データ投入中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python -m src.data.dwh.builder; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ DWH構築・データ投入完了"

dwh-explore:
	@echo "🔍 DWHデータ探索中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python -m src.data.dwh.explorer; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi

dwh-stats:
	@echo "📊 DWH統計情報取得中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python -m src.data.dwh.stats; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi

# モデル訓練
train:
	@echo "🤖 モデル訓練中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python -m src.models.training.trainer; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ モデル訓練完了"

train-ensemble:
	@echo "🎯 アンサンブルモデル訓練中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python -m src.models.ensemble.trainer; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ アンサンブルモデル訓練完了"

check-model:
	@echo "📊 モデル性能確認中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python -m src.models.inference.predictor --check; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi

# パイプライン
pipeline: clean install-dev lint test train-ensemble
	@echo "🚀 全パイプライン実行完了"

pipeline-quick: clean install lint test-unit train
	@echo "⚡ クイックパイプライン実行完了"

# 状態確認
status:
	@echo "📊 パイプライン状態確認中..."
	@echo "仮想環境: $$([ -d "$(VENV)" ] && echo "✅ 存在" || echo "❌ 不存在")"
	@echo "DWH: $$([ -f "data/house_price_dwh.duckdb" ] && echo "✅ 存在" || echo "❌ 不存在")"
	@echo "モデル: $$([ -f "models/trained/house_price_prediction.pkl" ] && echo "✅ 存在" || echo "❌ 不存在")"
	@echo "設定: $$([ -f "configs/app.yaml" ] && echo "✅ 存在" || echo "❌ 不存在")"

# Docker
docker-build:
	@echo "🐳 Dockerイメージビルド中..."
	docker-compose build
	@echo "✅ Dockerイメージビルド完了"

docker-run:
	@echo "🚀 Dockerコンテナ起動中..."
	docker-compose up -d
	@echo "✅ Dockerコンテナ起動完了"

docker-stop:
	@echo "🛑 Dockerコンテナ停止中..."
	docker-compose down
	@echo "✅ Dockerコンテナ停止完了"

# Metabase
metabase-full:
	@echo "📊 Metabase完全セットアップ中..."
	@if [ -d "$(VENV)" ]; then \
		$(VENV)/bin/python scripts/setup_metabase.py --full; \
	else \
		echo "❌ 仮想環境が見つかりません"; \
		exit 1; \
	fi
	@echo "✅ Metabase完全セットアップ完了"

metabase-up:
	@echo "📊 Metabase起動中..."
	docker-compose -f deployment/metabase/docker-compose.yaml up -d
	@echo "✅ Metabase起動完了"

metabase-down:
	@echo "📊 Metabase停止中..."
	docker-compose -f deployment/metabase/docker-compose.yaml down
	@echo "✅ Metabase停止完了"

metabase-status:
	@echo "📊 Metabase状態確認中..."
	docker-compose -f deployment/metabase/docker-compose.yaml ps

# リリース
release:
	@echo "🏷️ リリース用タグを作成中..."
	@read -p "バージョン番号を入力してください (例: v1.0.0): " version; \
	git tag -a $$version -m "Release $$version"; \
	git push origin $$version; \
	echo "✅ リリースタグ $$version を作成しました" 